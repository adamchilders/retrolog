name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: mydatabase
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uuser -ppassword --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: Run backend tests
      env:
        DATABASE_URL: mysql+pymysql://user:password@127.0.0.1:3306/mydatabase
        GOOGLE_API_KEY: test_api_key
        SECRET_KEY: test_secret_key
      run: |
        cd backend
        python -m pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start services
      env:
        GOOGLE_API_KEY: test_api_key
      run: |
        echo "GOOGLE_API_KEY=test_api_key" > backend/.env
        docker-compose up -d --build

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000/; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Test backend health
        curl -f http://localhost:8000/ || exit 1
        
        # Test frontend accessibility
        curl -f http://localhost:3000/ || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/docs || exit 1

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python linting tools
      run: |
        pip install flake8 black isort mypy

    - name: Run Python linting
      run: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503 || true
        black --check app/ || true
        isort --check-only app/ || true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run TypeScript checks
      run: |
        cd frontend
        npx tsc --noEmit

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan, code-quality]
    if: success()

    steps:
    - name: Success notification
      run: |
        echo "ðŸŽ‰ All tests passed successfully!"
        echo "âœ… Backend tests: PASSED"
        echo "âœ… Frontend tests: PASSED"
        echo "âœ… Integration tests: PASSED"
        echo "âœ… Security scan: PASSED"
        echo "âœ… Code quality: PASSED"
